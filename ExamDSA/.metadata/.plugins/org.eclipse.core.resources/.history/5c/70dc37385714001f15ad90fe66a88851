package DSA;

public class SingleCircularLinkedList {

	public static class Node {
	    String data;
	    Node next;

	    public Node(String data) {
	        this.data = data;
	        this.next = null;
	    }

		public String getData() {
			return data;
		}

		public void setData(String data) {
			this.data = data;
		}

		public Node getNext() {
			return next;
		}

		public void setNext(Node next) {
			this.next = next;
		}
	    
	    
	      
	}
	
	private Node head;
    private Node tail;

    public SingleCircularLinkedList() {
        this.head = null;
        this.tail = null;
    }
    

    public void addLast(String data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            tail = newNode;
            newNode.next = head;
        } else {
            tail.next = newNode;
            tail = newNode;
            tail.next = head;
        }
    }
	
    public void deleteLast() {
        if (head == null) {
            return;
        }
        
        if(head == tail) {
        	head=tail = null;
        }
        
        else {
        	 Node trav = head;
        	while(trav.next!=tail)
        		trav = trav.next;
        	trav.next = head;
        	tail = trav;
        }
    }
    public void display() {
        if (head == null) {
            System.out.println("The list is empty.");
            return;
        }
        Node temp = head;
        do {
            System.out.print(temp.data + " ");
            temp = temp.next;
        } while (temp != head);
        
        System.out.println();
    }
    
    
    public void delete(Node trav, Node del) {
        if (trav == null) {
            return;
        }
        if (trav == del) {
            if (trav.next == head) {
              head = null;
              tail = null;
            } else {
                trav = trav.next;
                tail.next = trav;
            }
        } else {
            trav.next = trav.next;
            if (del == tail) {
                tail = trav;
            }
        }
    }
    
	public Node getHead() {
		return head;
	}

}
